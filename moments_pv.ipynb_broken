{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c154dcef",
   "metadata": {},
   "source": [
    "# Extracting and Plotting Position-Velocity Diagrams\n",
    "\n",
    "#### https://github.com/astropy/astropy-tutorials/blob/main/tutorials/position-velocity-diagrams/PVDiagramPlotting.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8d7e8b98",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pylab as plt\n",
    "import numpy as np\n",
    "from astropy import constants as c\n",
    "from astropy import units as u\n",
    "from astropy.visualization import quantity_support\n",
    "from astropy import wcs\n",
    "from astropy.coordinates import SkyCoord\n",
    "from astropy.wcs.utils import skycoord_to_pixel\n",
    "from astropy.nddata import Cutout2D\n",
    "from astropy.visualization import (MinMaxInterval, SqrtStretch, SinhStretch, AsinhStretch, ImageNormalize)\n",
    "import radio_beam\n",
    "import regions\n",
    "import matplotlib.gridspec as gridspec\n",
    "\n",
    "# set so that these display properly on black backgrounds\n",
    "plt.rcParams['figure.facecolor']='w'\n",
    "\n",
    "from spectral_cube import SpectralCube\n",
    "from pvextractor import extract_pv_slice, Path\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "195cccc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_subcube(filename, center=(0,0), width=10*u.arcsec, height=10*u.arcsec, angle=0*u.deg):\n",
    "    cube = SpectralCube.read(filename, format='fits', use_dask=True)\n",
    "\n",
    "    subregion = regions.RectangleSkyRegion(center, width=width, height=height, angle=angle)\n",
    "    subcube = cube.subcube_from_regions([subregion])\n",
    "\n",
    "    h = subcube.header\n",
    "    dra = (1 + np.arange(h['NAXIS1']) - h['CRPIX1']) * h['CDELT1'] * 3600\n",
    "    ddec = (1 + np.arange(h['NAXIS2']) - h['CRPIX2']) * h['CDELT2'] * 3600\n",
    "    extent = [dra.max(), dra.min(), ddec.min(), ddec.max()]\n",
    "\n",
    "    return subcube, extent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "74cbcddc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Kepler(Mstar, Rin, Rout):\n",
    "    # Keplerian velocities for a central stellar mass Mstar, with disk inner and outer radii in au\n",
    "    \n",
    "    dR = (Rout-Rin)/100\n",
    "    R = np.arange(Rin+dR, Rout, dR)\n",
    "    VKep = (np.sqrt(c.GM_sun * Mstar / (R *c.au))).to(u.km/u.s).value\n",
    "        \n",
    "    return R, VKep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a4e48075",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bound_velocities(Mstar, Rin, Rout):\n",
    "    # Cesaroni formulation to give the min and max projected velocities for an edge-on disk\n",
    "    # for a central stellar mass Mstar, with disk inner and outer radii in au\n",
    "    VKep = (np.sqrt(c.GM_sun * Mstar / c.au)).to(u.km/u.s).value\n",
    "    \n",
    "    dR = (Rout-Rin)/100\n",
    "    R = np.arange(Rin+dR, Rout, dR)\n",
    "    Vbound_min = np.zeros(len(R))\n",
    "    Vbound_max = np.zeros(len(R))\n",
    "    \n",
    "    for i,x in enumerate(R):\n",
    "        z1 = np.sqrt(Rout**2-x**2)\n",
    "        dz = z1/100\n",
    "        z = np.arange(-z1, z1+dz, dz)\n",
    "        r1 = np.sqrt(x**2 + z**2)\n",
    "        v1 = VKep*(x+1.4142*z)/r1**1.5\n",
    "        Vbound_min[i] = np.min(v1)\n",
    "        Vbound_max[i] = np.max(v1)\n",
    "        \n",
    "    return R, Vbound_min, Vbound_max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f9a12bff",
   "metadata": {},
   "outputs": [],
   "source": [
    "path = 'data/'\n",
    "obs = {'line':['12co', '13co', 'c18o', 'h2co', 'so'] \\\n",
    "      ,'restfreq':[230.5380000, 220.39868420, 219.56035410, 218.222192, 219.949442] \\\n",
    "      ,'clip':[10, 15, 10, 5, 10] \\\n",
    "      ,'smooth':[False, False, True, False, True] \\\n",
    "      ,'name':['CO', '$^{13}$CO', 'C$^{18}$O', 'H$_2$CO', 'SO'] \\\n",
    "      ,'annotate':[True, False, False, False, True]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6a271c97",
   "metadata": {},
   "outputs": [],
   "source": [
    "vla1 = SkyCoord('16h27m26.906s', '-24d40m50.82s', frame='icrs')\n",
    "vla2 = SkyCoord('16h27m26.911s', '-24d40m51.40s', frame='icrs')\n",
    "dra, ddec = vla1.spherical_offsets_to(vla2)\n",
    "x_vla2 = dra.to(u.arcsec).value\n",
    "y_vla2 = ddec.to(u.arcsec).value\n",
    "\n",
    "td = SkyCoord('16h27m26.602s', '-24d40m45.70s', frame='icrs')\n",
    "dra, ddec = vla1.spherical_offsets_to(td)\n",
    "x_td = dra.to(u.arcsec).value\n",
    "y_td = ddec.to(u.arcsec).value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3c458f47",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define the PV cut in arcsecond offsets relative to VLA1\n",
    "large_scale = True\n",
    "\n",
    "if large_scale:\n",
    "    # envelope\n",
    "    path_dra = [-4.1, 4.1]\n",
    "    path_ddec = [0, 0]\n",
    "    width = 0.5\n",
    "else:\n",
    "    # disk outflow\n",
    "    path_dra = [0.2, -0.2]\n",
    "    path_ddec = [0.35, -0.35]\n",
    "    width = 0.3\n",
    "    \n",
    "# convert the path to sky coordinates\n",
    "cosdec = np.cos(np.radians(vla1.dec.value))\n",
    "path_start = SkyCoord(vla1.ra+path_dra[0]*u.arcsec/cosdec, vla1.dec+path_ddec[0]*u.arcsec, frame='icrs')\n",
    "path_end = SkyCoord(vla1.ra+path_dra[1]*u.arcsec/cosdec, vla1.dec+path_ddec[1]*u.arcsec, frame='icrs')\n",
    "skypath = Path(SkyCoord([path_end.ra, path_start.ra], [path_end.dec, path_start.dec], frame='icrs'), width=width*u.arcsec)\n",
    "path_start_offset = vla1.separation(path_start)\n",
    "\n",
    "# define the velocity range for the PV plots\n",
    "Vmin, Vmax = -5.5, 15.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3abd653b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "concatenate() got an unexpected keyword argument 'dtype'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/tx/plmj8k8969gcvbqj4tml5hvm0000gn/T/ipykernel_4481/2108397397.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     81\u001b[0m     \u001b[0msize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mksiz\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \u001b[0mcutout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCutout2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpvdiagram\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mposition\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'partial'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwcs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mww\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0max2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_subplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprojection\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcutout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m     \u001b[0mim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcutout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maspect\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0masp\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnx\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mksiz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36madd_subplot\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    770\u001b[0m             projection_class, pkw = self._process_projection_requirements(\n\u001b[1;32m    771\u001b[0m                 *args, **kwargs)\n\u001b[0;32m--> 772\u001b[0;31m             \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msubplot_class_factory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprojection_class\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    773\u001b[0m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mprojection_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    774\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_add_axes_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/matplotlib/axes/_subplots.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, fig, *args, **kwargs)\u001b[0m\n\u001b[1;32m     32\u001b[0m         \"\"\"\n\u001b[1;32m     33\u001b[0m         \u001b[0;31m# _axes_class is set in the subplot_class_factory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_axes_class\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m         \u001b[0;31m# This will also update the axes position.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_subplotspec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mSubplotSpec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_from_subplot_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/visualization/wcsaxes/core.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, fig, rect, wcs, transform, coord_meta, transData, slices, frame_class, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransData\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransData\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_wcs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mslices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcoord_meta\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcoord_meta\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_hide_parent_artists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat_coord\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_display_world_coords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/visualization/wcsaxes/core.py\u001b[0m in \u001b[0;36mreset_wcs\u001b[0;34m(self, wcs, slices, transform, coord_meta)\u001b[0m\n\u001b[1;32m    368\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwcs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 370\u001b[0;31m             \u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcoord_meta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform_coord_meta_from_wcs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mslices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    371\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    372\u001b[0m         self.coords = CoordinatesMap(self,\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/visualization/wcsaxes/wcsapi.py\u001b[0m in \u001b[0;36mtransform_coord_meta_from_wcs\u001b[0;34m(wcs, frame_class, slices)\u001b[0m\n\u001b[1;32m    137\u001b[0m     \u001b[0mtransform_wcs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minvert_xy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mworld_map\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mapply_slices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m     \u001b[0mtransform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mWCSPixel2WorldTransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransform_wcs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minvert_xy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minvert_xy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcoord_meta\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'type'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/visualization/wcsaxes/wcsapi.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, wcs, invert_xy)\u001b[0m\n\u001b[1;32m    331\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minvert_xy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minvert_xy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 333\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe_out\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwcsapi_to_celestial_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    334\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__eq__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/visualization/wcsaxes/wcsapi.py\u001b[0m in \u001b[0;36mwcsapi_to_celestial_frame\u001b[0;34m(wcs)\u001b[0m\n\u001b[1;32m    250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    251\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mwcsapi_to_celestial_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 252\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mwcs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mworld_axis_object_classes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    253\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0missubclass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSkyCoord\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    254\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'frame'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mICRS\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/wcs/wcsapi/fitswcs.py\u001b[0m in \u001b[0;36mworld_axis_object_classes\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    343\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mworld_axis_object_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_components_and_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/wcs/wcsapi/fitswcs.py\u001b[0m in \u001b[0;36m_get_components_and_classes\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    437\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspecsys\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mVELOCITY_FRAMES\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    438\u001b[0m                     \u001b[0mframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mVELOCITY_FRAMES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwcs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspecsys\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 439\u001b[0;31m                     \u001b[0mobserver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobserver_location\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    440\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m                         \u001b[0mobserver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mattach_zero_velocities\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobserver\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/coordinates/sky_coordinate.py\u001b[0m in \u001b[0;36mtransform_to\u001b[0;34m(self, frame, merge_attributes)\u001b[0m\n\u001b[1;32m    673\u001b[0m         \u001b[0;31m# Do the transformation, returning a coordinate frame of the desired\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    674\u001b[0m         \u001b[0;31m# final type (not generic).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 675\u001b[0;31m         \u001b[0mnew_coord\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrans\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgeneric_frame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    676\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    677\u001b[0m         \u001b[0;31m# Finally make the new SkyCoord object from the `new_coord` and\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/coordinates/transformations.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, fromcoord, toframe)\u001b[0m\n\u001b[1;32m   1477\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1478\u001b[0m             \u001b[0mcurr_toframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtosys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mfrattrs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1479\u001b[0;31m             \u001b[0mcurr_coord\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurr_coord\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcurr_toframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1481\u001b[0m         \u001b[0;31m# this is safe even in the case where self.transforms is empty, because\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/coordinates/transformations.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, fromcoord, toframe)\u001b[0m\n\u001b[1;32m   1077\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mreprwithoutdiff\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrealize_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreprwithdiff\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1078\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1079\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0msupcall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfromcoord\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtoframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1080\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1081\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\u001b[0m in \u001b[0;36mitrs_to_cirs\u001b[0;34m(itrs_coo, cirs_frame)\u001b[0m\n\u001b[1;32m    212\u001b[0m     \u001b[0;31m# compute the pmatrix, and then multiply by its transpose\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m     \u001b[0mpmat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcirs_to_itrs_mat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitrs_coo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobstime\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m     \u001b[0mnewrepr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitrs_coo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcartesian\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix_transpose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpmat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    215\u001b[0m     \u001b[0mcirs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCIRS\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnewrepr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobstime\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mitrs_coo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobstime\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/coordinates/representation.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, matrix)\u001b[0m\n\u001b[1;32m   1397\u001b[0m         \"\"\"\n\u001b[1;32m   1398\u001b[0m         \u001b[0;31m# erfa rxp: Multiply a p-vector by an r-matrix.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1399\u001b[0;31m         \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0merfa_ufunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrxp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_xyz\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxyz_axis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1400\u001b[0m         \u001b[0;31m# transformed representation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1401\u001b[0m         \u001b[0mrep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxyz_axis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/coordinates/representation.py\u001b[0m in \u001b[0;36mget_xyz\u001b[0;34m(self, xyz_axis)\u001b[0m\n\u001b[1;32m   1349\u001b[0m         \u001b[0;31m# But then in-place changes have to cancel it. Likely best to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1350\u001b[0m         \u001b[0;31m# also update components.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1351\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_z\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxyz_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1352\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1353\u001b[0m     \u001b[0mxyz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproperty\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mget_xyz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36mstack\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/units/quantity.py\u001b[0m in \u001b[0;36m__array_function__\u001b[0;34m(self, function, types, args, kwargs)\u001b[0m\n\u001b[1;32m   1681\u001b[0m         \u001b[0;31m# implementation.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1682\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfunction\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mSUBCLASS_SAFE_FUNCTIONS\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1683\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__array_function__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtypes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1684\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1685\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mfunction\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mFUNCTION_HELPERS\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/numpy/core/shape_base.py\u001b[0m in \u001b[0;36mstack\u001b[0;34m(arrays, axis, out, dtype, casting)\u001b[0m\n\u001b[1;32m    469\u001b[0m     \u001b[0msl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mslice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnewaxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    470\u001b[0m     \u001b[0mexpanded_arrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msl\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 471\u001b[0;31m     return _nx.concatenate(expanded_arrays, axis=axis, out=out,\n\u001b[0m\u001b[1;32m    472\u001b[0m                            dtype=dtype, casting=casting)\n\u001b[1;32m    473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36mconcatenate\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/astropy/units/quantity.py\u001b[0m in \u001b[0;36m__array_function__\u001b[0;34m(self, function, types, args, kwargs)\u001b[0m\n\u001b[1;32m   1686\u001b[0m             \u001b[0mfunction_helper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFUNCTION_HELPERS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1687\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1688\u001b[0;31m                 \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction_helper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1689\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1690\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_not_implemented_or_raise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtypes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: concatenate() got an unexpected keyword argument 'dtype'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1100 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot peak temperature, moment1, and PV diagram for each line\n",
    "fig = plt.figure(figsize=(12,11))\n",
    "gs = gridspec.GridSpec(5, 3, figure=fig)\n",
    "\n",
    "for i in range(5):\n",
    "    filename = path + obs['line'][i] + '.fits'\n",
    "    #filename = path + 'OphIRS43_SB_' + obs['line'][i] + '_robust_0.5.pbcor.fits' \n",
    "    \n",
    "    if large_scale:\n",
    "        subcube, extent = make_subcube(filename, vla1, 10*u.arcsec, 5*u.arcsec, 0*u.deg)\n",
    "    else:\n",
    "        subcube, extent = make_subcube(filename, vla1, 2*u.arcsec, 1*u.arcsec, 0*u.deg)\n",
    "    subcube_kms = subcube.with_spectral_unit(u.km/u.s, velocity_convention='radio', rest_value=obs['restfreq'][i]*u.GHz)\n",
    "    \n",
    "    clip = obs['clip'][i]/1000 * u.Jy / u.beam\n",
    "    mask_3sigma = (subcube_kms > clip).include()\n",
    "    masked_cube =  subcube_kms.with_mask(mask_3sigma.compute())\n",
    "    masked_moment0 = subcube_kms.moment0()\n",
    "    masked_peak = np.max(subcube_kms, axis=0)\n",
    "    masked_moment1 = masked_cube.moment1()\n",
    "    \n",
    "    if obs['smooth'][i]:\n",
    "        beam = radio_beam.Beam(major=0.25*u.arcsec, minor=0.25*u.arcsec, pa=0*u.deg)\n",
    "        masked_peak = masked_peak.convolve_to(beam)\n",
    "        \n",
    "    # 1st column for moment0 map\n",
    "    ax0 = fig.add_subplot(gs[i, 0])\n",
    "    norm = ImageNormalize(masked_peak.value, vmin=clip.value, stretch=AsinhStretch(0.3))\n",
    "    mom0 = ax0.imshow(masked_peak.value, origin='lower', norm=norm, extent=extent, cmap='inferno', interpolation='bicubic')\n",
    "    #ax0.arrow(path_dra[0], path_ddec[0], path_dra[1]-path_dra[0], path_ddec[1]-path_ddec[0], head_width=0.2, color='green', lw=3)\n",
    "    ax0.text(0.03, 0.85, obs['name'][i], fontsize=12, color='white', transform = ax0.transAxes)\n",
    "    \n",
    "    # 2nd column for moment1 map\n",
    "    ax1 = fig.add_subplot(gs[i, 1])\n",
    "    mom1 = ax1.imshow(masked_moment1.value, origin='lower', vmin=0.0, vmax=6.0, extent=extent, cmap='bwr', interpolation='bicubic')\n",
    "    #ax1.arrow(path_dra[0], path_ddec[0], path_dra[1]-path_dra[0], path_ddec[1]-path_ddec[0], head_width=0.2, color='green', lw=3, alpha=0.3)\n",
    "    pv_box_x = [path_dra[0], path_dra[0], path_dra[1], path_dra[1], path_dra[0]]\n",
    "    y0 = path_ddec[0]\n",
    "    dy = width / 2\n",
    "    pv_box_y = [y0-dy, y0+dy, y0+dy, y0-dy, y0-dy]\n",
    "    if obs['line'][i] == 'so':\n",
    "        col = 'gray'\n",
    "    else:\n",
    "        col = 'white'\n",
    "    ax1.plot(pv_box_x, pv_box_y, color=col, lw=1, alpha=1)\n",
    "    \n",
    "    for ax in [ax0, ax1]:\n",
    "        if large_scale:\n",
    "            xmin, xmax = -5, 5\n",
    "            ymin, ymax = -2.5, 2.5\n",
    "        else:\n",
    "            xmin, xmax = -1, 1\n",
    "            ymin, ymax = -0.5, 0.5        \n",
    "        ax.set_xlim(xmax, xmin)\n",
    "        ax.set_ylim(ymin, ymax)\n",
    "        asp = (ymax - ymin) / (xmax - xmin)\n",
    "        \n",
    "        if ax == ax0:\n",
    "            ax.plot(0, 0, '+', ms=12, mew=1, color='white')\n",
    "            ax.plot(x_vla2, y_vla2, '+', ms=7, mew=1, color='white')\n",
    "            ax.plot(x_td, y_td, '+', ms=7, mew=1, color='white')\n",
    "        else:\n",
    "            ax.plot(0, 0, '+', ms=12, mew=1, color='black')\n",
    "            ax.plot(x_vla2, y_vla2, '+', ms=7, mew=1, color='black')\n",
    "            ax.plot(x_td, y_td, '+', ms=7, mew=1, color='black')\n",
    "        ax.set_ylabel(r'$\\Delta\\delta$')\n",
    "        ax.set_xlabel(r'$\\Delta\\alpha$')\n",
    "        \n",
    "    # 3rd column is the pv-diagram with adjust aspect ratio\n",
    "    pvdiagram = extract_pv_slice(cube=subcube_kms, path=skypath)\n",
    "    ww = wcs.WCS(pvdiagram.header)\n",
    "    ww.wcs.crval[0] = path_start_offset.value\n",
    "    ww.wcs.cdelt[0] *= -1\n",
    "    kmin = (1000*Vmin - ww.wcs.crval[1]) / ww.wcs.cdelt[1] + ww.wcs.crpix[1]\n",
    "    kmax = (1000*Vmax - ww.wcs.crval[1]) / ww.wcs.cdelt[1] + ww.wcs.crpix[1]\n",
    "    kcen = 0.5 * (kmin + kmax)\n",
    "    ksiz = int(kmax - kmin)\n",
    "    nx = pvdiagram.header['NAXIS1']\n",
    "    nv = pvdiagram.header['NAXIS2']\n",
    "    position = (nx/2, kcen)\n",
    "    size = (ksiz, nx)\n",
    "    cutout = Cutout2D(pvdiagram.data, position, size, mode='partial', wcs=ww)   \n",
    "    ax2 = fig.add_subplot(gs[i, 2], projection=cutout.wcs)\n",
    "    im = ax2.imshow(cutout.data, aspect=asp*nx/ksiz)\n",
    "    \n",
    "    #if obs['annotate'][i]:\n",
    "    #    ax2.annotate(\"outflow\",\n",
    "    #        xy=(1.0, 2.5), xycoords='data',\n",
    "    #        xytext=(5, 4.8), textcoords='data', color='white',\n",
    "    #        arrowprops=dict(arrowstyle=\"->\", color='white'))\n",
    "\n",
    "    # fix the axes limits so the next plots don't autoscale\n",
    "    ax2.set_xlim(ax2.get_xlim())\n",
    "    ax2.set_ylim(ax2.get_ylim())\n",
    "    #ax2.grid()\n",
    "    \n",
    "    # pure Keplerian\n",
    "    Vsys = 4.1\n",
    "    dist = 137.3\n",
    "    R, VKep = Kepler(2.5, 1, 500)\n",
    "    xpix, ypix = cutout.wcs.world_to_pixel_values(R/dist/3600, (Vsys+VKep)*1000)\n",
    "    ax2.plot(xpix, ypix, color='cyan', ls='-', lw=2, alpha=0.5)\n",
    "    xpix, ypix = cutout.wcs.world_to_pixel_values(-R/dist/3600, (Vsys-VKep)*1000)\n",
    "    ax2.plot(xpix, ypix, color='cyan', ls='-', lw=2, alpha=0.5)\n",
    "    \n",
    "    # Cesaroni infall + rotation fit\n",
    "    R, Vbound_min, Vbound_max = bound_velocities(2.5, 1, 500)\n",
    "    xpix, ypix = cutout.wcs.world_to_pixel_values(R/dist/3600, (Vsys+Vbound_min)*1000)\n",
    "    ax2.plot(xpix, ypix, color='white', ls=':', lw=2, alpha=1)\n",
    "    xpix, ypix = cutout.wcs.world_to_pixel_values(R/dist/3600, (Vsys+Vbound_max)*1000)\n",
    "    ax2.plot(xpix, ypix, color='white', ls=':', lw=2, alpha=1)\n",
    "    xpix, ypix = cutout.wcs.world_to_pixel_values(-R/dist/3600, (Vsys-Vbound_max)*1000)\n",
    "    ax2.plot(xpix, ypix, color='white', ls=':', lw=2, alpha=1)\n",
    "    xpix, ypix = cutout.wcs.world_to_pixel_values(-R/dist/3600, (Vsys-Vbound_min)*1000)\n",
    "    ax2.plot(xpix, ypix, color='white', ls=':', lw=2, alpha=1)\n",
    "    \n",
    "    ax2.coords[0].set_format_unit(u.arcsec)\n",
    "    #ax2.coords[0].set_major_formatter('%5.2f')\n",
    "    ax2.coords[1].set_format_unit(u.km/u.s)\n",
    "    ax2.set_ylabel(\"Velocity [km/s]\")\n",
    "    ax2.set_xlabel(\"Offset [arcsec]\")\n",
    "        \n",
    "gs.tight_layout(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "af075d16-679b-43f3-8337-af0720f35c85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32, 327)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cutout.data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a02708cb-6628-4d88-a9c7-6547703fccc8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec66a505-3cc8-4b44-b91f-b5eb38d6c6b4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b2bb582",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig('moments_pv.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c05efa5c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
